trigger:
  tags:
    include:
    - 'v*'
  branches:
    include:
    - '*'
variables:
- group: TestPyPi
stages:
- stage: Test
  jobs:
  - job: Test
    strategy:
      matrix:
#        'Python 3.8/Linux':
#          image: 'ubuntu-20.04'
#          pythonVersion: '3.8'
#        'Python 3.9/Linux':
#          image: 'ubuntu-20.04'
#          pythonVersion: '3.9'
        'Python 3.10/Linux':
          image: 'ubuntu-20.04'
          pythonVersion: '3.10'
        'Python 3.10/Mac OS 11':
          image: 'macOS-11'
          pythonVersion: '3.10'
#        'Windows Server 2019':
#          image: 'windows-2019'
#          pythonVersion: '3.8'

    pool:
      vmImage: $(image)

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        pip install -U poetry
        pip install -U tox
      displayName: 'Install Poetry'

    - bash: |
        PYENV=$(sed -e 's/\.//' <<< "py$(pythonVersion)")
        poetry run tox -e $PYENV
      displayName: 'Running tests via tox'

- stage: Build_Deploy
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  jobs:
  - job: Linux
    variables:
      image: 'ubuntu-20.04'
      pythonVersion: '3.10'

    pool:
      vmImage: $(image)

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        pip install -U poetry
      displayName: 'Install Poetry'

    - script: |
        echo ">>>>>>" $(PYPI_HOST)
        echo ">>>>>>" $(PYPI_TEST)
        BUILDTAG=$(echo "$(Build.SourceBranchName)-$(Agent.OS)-$(Agent.OSArchitecture)" | tr '[:upper:]' '[:lower:]')
        echo ">>>>>>" $BUILDTAG
        env | sort
      displayName: 'Test output/Debug'

    - script: |
        poetry config http-basic.testpypi $(PYPI_USER) $(PYPI_TOKEN)
        poetry config repositories.testpypi $(PYPI_HOST)
      displayName: 'Config Poetry for Deployment'

    - script: |
        BUILDTAG=$(echo "$(Build.SourceBranchName)-$(Agent.OS)-$(Agent.OSArchitecture)" | tr '[:upper:]' '[:lower:]')
        echo ">>>>>>" $BUILDTAG
        poetry install -v
        poetry build
        poetry run pyinstaller sample_prj/cli.py -n sample_prj --onefile --exclude-module _bootlocale
        tar cvzf dist/sample_prj-$BUILDTAG.tar.gz dist/sample_prj
        sha256sum dist/sample_prj-$BUILDTAG.tar.gz > dist/sample_prj-$BUILDTAG.tar.gz.sha256
        ls -R dist
      displayName: 'Build'

    - script: |
        poetry publish -r testpypi
      displayName: 'Publish to PyPI'

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github.com_stdtom (Release)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        assets: 'dist/sample_prj-$(Build.SourceBranchName)-*.*'
        addChangeLog: false

  - job: Windows
    variables:
      image: 'windows-2019'
      pythonVersion: '3.8'

    pool:
      vmImage: $(image)

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        pip install -U poetry
      displayName: 'Install Poetry'

    - script: |
        echo ">>>>>>" $(PYPI_HOST)
        echo ">>>>>>" $(PYPI_TEST)
        BUILDTAG=$(echo "$(Build.SourceBranchName)-$(Agent.OS)-$(Agent.OSArchitecture)" | tr '[:upper:]' '[:lower:]')
        echo ">>>>>>" $BUILDTAG
        env | sort
      displayName: 'Test output/Debug'

    - bash: |
        BUILDTAG=$(echo "$(Build.SourceBranchName)-$(Agent.OS)-$(Agent.OSArchitecture)" | tr '[:upper:]' '[:lower:]')
        echo ">>>>>>" $BUILDTAG
        poetry install -v
        poetry build
        poetry run pyinstaller sample_prj/cli.py -n sample_prj --onefile --exclude-module _bootlocale
        ls -R dist
        7z a dist/sample_prj-$BUILDTAG.zip dist/sample_prj.exe
        ls -R dist
        sha256sum dist/sample_prj-$BUILDTAG.zip > dist/sample_prj-$BUILDTAG.zip.sha256
        ls -R dist
      displayName: 'Build'

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github.com_stdtom (Release)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        assets: 'dist/sample_prj-$(Build.SourceBranchName)-*.*'
        addChangeLog: false
